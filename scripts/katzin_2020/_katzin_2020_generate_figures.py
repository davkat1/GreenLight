"""
GreenLight/scripts/katzin_2020/_katzin_2020_generate_figures.py
Copyright (c) 2025 David Katzin, Wageningen Research Foundation
SPDX-License-Identifier: BSD-3-Clause-Clear
https://github.com/davkat1/GreenLight

Functions for generating Figures 5-7 published in Katzin (2020), which also appeared as Katzin (2021) Chapter 3.

This script assumes that katzin_2020_run_sims.py has been run successfully, and that the output files are in
models/katzin_2021/output

It also assumes that the data from Katzin (2020) is in models/katzin_2021/input_data/katzin_2020_original
To do this, first the old data files must be acquired from:
    https://data.4tu.nl/datasets/78968e1b-eaea-4f37-89f9-2b98ba3ed865
    Download the file "Processed data.zip", unzip it, and copy the CSV files in the folder to:
    models/katzin_2021/input_data/katzin_2020_original

References:
    Katzin, D., van Mourik, S., Kempkes, F., & van Henten, E. J. (2020). GreenLight – An open source model for
        greenhouses with supplemental lighting: Evaluation of heat requirements under LED and HPS lamps.
        Biosystems Engineering, 194, 61–81. https://doi.org/10.1016/j.biosystemseng.2020.03.010
    Katzin, D. (2021). Energy Saving by LED Lighting in Greenhouses : A Process-Based Modelling Approach.
        PhD thesis, Wageningen University. https://doi.org/10.18174/544434
"""

import matplotlib
import pandas as pd

matplotlib.use("TkAgg")  # Ensure that the TkAgg backend is used

# "noqa: E402" is used to have the linter/pre-commit ignore the rule "E402 module level import not at top of file"
# This allows to set the TkAgg backend for matplotlib
import matplotlib.pyplot as plt  # noqa: E402


def generate_fig_5(
    greenhouse_data_hps: pd.DataFrame,
    greenhouse_data_led: pd.DataFrame,
    climate_sim_hps: pd.DataFrame,
    climate_sim_led: pd.DataFrame,
    energy_sim_hps: pd.DataFrame,
    energy_sim_led: pd.DataFrame,
) -> None:
    """
    Generate Figure 5 from Katzin 2020 - Timeline of the measured and simulated heating inputs in the HPS and LED
        compartments. See katzin_2020_generate_output.py for usage example.

    :param greenhouse_data_hps: Pandas dataframe created using pd.read_csv with the "dataHPS.csv" file from the original
                                dataset (https://data.4tu.nl/datasets/78968e1b-eaea-4f37-89f9-2b98ba3ed865)
    :param greenhouse_data_led: Pandas dataframe created using pd.read_csv with the "dataLED.csv" file from the original
                                dataset
    :param climate_sim_hps: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_hps.csv" generated by katzin_2020_run_sims.py
    :param climate_sim_led: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_led.csv" generated by katzin_2020_run_sims.py
    :param energy_sim_hps: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_energy_hps.csv" generated by katzin_2020_run_sims.py
    :param energy_sim_led: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_energy_led.csv" generated by katzin_2020_run_sims.py
    :return: None
    """

    # Starting time of the data
    start_time = pd.to_datetime("2009-10-19 15:15")

    energy_sim_hps["Datetime"] = start_time + pd.to_timedelta(energy_sim_hps["Time"], unit="s")
    energy_sim_led["Datetime"] = energy_sim_hps["Datetime"]
    climate_sim_hps["Datetime"] = energy_sim_hps["Datetime"]
    climate_sim_led["Datetime"] = energy_sim_hps["Datetime"]
    greenhouse_data_hps["Datetime"] = energy_sim_hps["Datetime"]
    greenhouse_data_led["Datetime"] = energy_sim_hps["Datetime"]

    plt.plot(
        greenhouse_data_hps["Datetime"],
        300e-6 * (greenhouse_data_hps["hBoilPipe"] + greenhouse_data_hps["hBoilGroPipe"]).cumsum(),
        "b--",
    )
    plt.plot(
        energy_sim_hps["Datetime"],
        300e-6 * (energy_sim_hps["hBoilPipe"] + energy_sim_hps["hBoilGroPipe"]).cumsum(),
        "b-",
    )
    plt.plot(
        greenhouse_data_led["Datetime"],
        300e-6 * (greenhouse_data_led["hBoilPipe"] + greenhouse_data_led["hBoilGroPipe"]).cumsum(),
        "r--",
    )
    plt.plot(
        energy_sim_led["Datetime"],
        300e-6 * (energy_sim_led["hBoilPipe"] + energy_sim_led["hBoilGroPipe"]).cumsum(),
        "r-",
    )
    plt.grid(True)
    plt.legend(["HPS measured", "HPS simulated", "LED measured", "LED simulated"])
    plt.ylabel("Cumulative heating input (MJ/m2)")
    plt.show()


def generate_fig_6(
    greenhouse_data_hps: pd.DataFrame,
    greenhouse_data_led: pd.DataFrame,
    climate_sim_hps: pd.DataFrame,
    climate_sim_led: pd.DataFrame,
) -> None:
    """
    Generate Figure 6 from Katzin 2020 - Sample of the measured and simulated climate trajectories for TAir, RHAir,
    and CO2ppmAir in the HPS and LED compartments. See katzin_2020_generate_output.py for usage example.

    :param greenhouse_data_hps: Pandas dataframe created using pd.read_csv with the "dataHPS.csv" file from the original
                                dataset (https://data.4tu.nl/datasets/78968e1b-eaea-4f37-89f9-2b98ba3ed865)
    :param greenhouse_data_led: Pandas dataframe created using pd.read_csv with the "dataLED.csv" file from the original
                                dataset
    :param climate_sim_hps: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_hps.csv" generated by katzin_2020_run_sims.py
    :param climate_sim_led: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_led.csv" generated by katzin_2020_run_sims.py
    :return: None
    """

    # Choose a date range
    start_date = "2009-11-26 12:00"
    end_date = "2009-12-01 18:00"

    fig, axs = plt.subplots(4, 2)
    row = 0

    # Plot tAir, rhIn, co2InPpm
    for col, unit, ylim in zip(["tAir", "rhIn", "co2InPpm"], ["°C", "%", "ppm"], [[14, 32], [60, 100], [300, 2100]]):

        # HPS
        mask = (greenhouse_data_hps["Datetime"] >= start_date) & (greenhouse_data_hps["Datetime"] <= end_date)
        data_filtered = greenhouse_data_hps[mask]
        mask = (climate_sim_hps["Datetime"] >= start_date) & (climate_sim_hps["Datetime"] <= end_date)
        sim_filtered = climate_sim_hps[mask]

        # Plot the filtered data
        axs[row, 0].plot(data_filtered["Datetime"], data_filtered[col], "b", label="Measured")
        axs[row, 0].plot(sim_filtered["Datetime"], sim_filtered[col], "r", label="Simulated")
        axs[row, 0].grid(True)
        axs[row, 0].set_title(f"{col} HPS")
        axs[row, 0].set_xlabel("Time")
        axs[row, 0].set_ylabel(f"{col} ({unit})")
        axs[row, 0].set_ylim(ylim)

        # LED
        mask = (greenhouse_data_led["Datetime"] >= start_date) & (greenhouse_data_led["Datetime"] <= end_date)
        data_filtered = greenhouse_data_led[mask]
        mask = (climate_sim_led["Datetime"] >= start_date) & (climate_sim_led["Datetime"] <= end_date)
        sim_filtered = climate_sim_led[mask]

        # Plot the filtered data
        axs[row, 1].plot(data_filtered["Datetime"], data_filtered[col], "b", label="Measured")
        axs[row, 1].plot(sim_filtered["Datetime"], sim_filtered[col], "r", label="Simulated")
        axs[row, 1].grid(True)
        axs[row, 1].set_title(f"{col} LED")
        axs[row, 1].set_xlabel("Time")
        axs[row, 1].set_ylim(ylim)

        if row == 0:
            axs[row, 1].legend()

        row = row + 1

    # Plot solar radiation and lamp use
    # HPS
    mask = (greenhouse_data_hps["Datetime"] >= start_date) & (greenhouse_data_hps["Datetime"] <= end_date)
    data_filtered = greenhouse_data_hps[mask]
    mask = (climate_sim_hps["Datetime"] >= start_date) & (climate_sim_hps["Datetime"] <= end_date)
    sim_filtered = climate_sim_hps[mask]

    # Plot the filtered data
    axs[row, 0].plot(data_filtered["Datetime"], data_filtered["iGlob"], "y", label="Sun radiation")
    axs[row, 0].plot(sim_filtered["Datetime"], sim_filtered["qLampIn"], "m", label="Lamp input")
    axs[row, 0].grid(True)
    axs[row, 0].set_title("Sun and lamps HPS")
    axs[row, 0].set_xlabel("Time")
    axs[row, 0].set_ylabel("Energy (W/m2)")
    axs[row, 0].set_ylim([0, 240])

    # LED
    mask = (greenhouse_data_led["Datetime"] >= start_date) & (greenhouse_data_led["Datetime"] <= end_date)
    data_filtered = greenhouse_data_led[mask]
    mask = (climate_sim_led["Datetime"] >= start_date) & (climate_sim_led["Datetime"] <= end_date)
    sim_filtered = climate_sim_led[mask]

    # Plot the filtered data
    axs[row, 1].plot(data_filtered["Datetime"], data_filtered["iGlob"], "y", label="Sun radiation")
    axs[row, 1].plot(sim_filtered["Datetime"], sim_filtered["qLampIn"], "m", label="Lamp input")
    axs[row, 1].grid(True)
    axs[row, 1].set_title("Sun and lamps LED")
    axs[row, 1].set_xlabel("Time")
    axs[row, 1].set_ylim([0, 240])

    axs[row, 1].legend()

    plt.show()


def generate_fig_7(climate_sim_hps: pd.DataFrame, climate_sim_led: pd.DataFrame) -> None:
    """
    Generate Figure 7 from Katzin 2020 - Timeline of the simulated lamp and air temperatures.
    See katzin_2020_generate_output.py for usage example.

    :param climate_sim_hps: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_hps.csv" generated by katzin_2020_run_sims.py
    :param climate_sim_led: Pandas dataframe created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_led.csv" generated by katzin_2020_run_sims.py
    :return: None
    """

    # Choose a date range
    start_date = "2009-11-14 18:00"
    end_date = "2009-11-15 18:00"

    fig, axs = plt.subplots(2, 1)
    row = 0
    # Plot tAir, rhIn, co2InPpm
    for lamp, ylim in zip(["HPS", "LED"], [[0, 250], [18, 30]]):

        if lamp == "HPS":
            mask = (climate_sim_hps["Datetime"] >= start_date) & (climate_sim_hps["Datetime"] <= end_date)
            sim_filtered = climate_sim_hps[mask]
        else:
            mask = (climate_sim_led["Datetime"] >= start_date) & (climate_sim_led["Datetime"] <= end_date)
            sim_filtered = climate_sim_led[mask]

        # Plot the filtered data
        axs[row].plot(sim_filtered["Datetime"], sim_filtered["tAir"], "b", label="Air temperature (°C)")
        axs[row].plot(sim_filtered["Datetime"], sim_filtered["tLamp"], "r", label="Lamp temperature (°C)")
        axs[row].set_ylabel("Temperature (°C)")
        axs[row].set_ylim(ylim)

        ax2 = axs[row].twinx()
        ax2.plot(sim_filtered["Datetime"], sim_filtered["qLampIn"], "y", label="Lamp input (W/m2)")
        ax2.set_ylim([0, 120])
        ax2.set_ylabel("Lamp input (W/m2)")

        axs[row].grid(True)
        axs[row].set_xlabel("Time")
        axs[row].set_title(f"{lamp} temperature and input")

        if row == 0:
            lines, labels = axs[row].get_legend_handles_labels()
            lines2, labels2 = ax2.get_legend_handles_labels()
            ax2.legend(lines + lines2, labels + labels2, loc="upper right")

        row = row + 1

    plt.show()
