"""
GreenLight/scripts/katzin_2020/_katzin_2020_generate_tables.py
Copyright (c) 2025 David Katzin, Wageningen Research Foundation
SPDX-License-Identifier: BSD-3-Clause-Clear
https://github.com/davkat1/GreenLight

Functions for generating Tables 3-4 published in Katzin (2020), which also appeared as Katzin (2021) Chapter 3.

This script assumes that katzin_2020_run_sims.py has been run successfully, and that the output files are in
models/katzin_2021/output

It also assumes that the data from Katzin (2020) is in models/katzin_2021/input_data/katzin_2020_original
To do this, first the old data files must be acquired from:
    https://data.4tu.nl/datasets/78968e1b-eaea-4f37-89f9-2b98ba3ed865
    Download the file "Processed data.zip", unzip it, and copy the CSV files in the folder to:
    models/katzin_2021/input_data/katzin_2020_original

References:
    Katzin, D., van Mourik, S., Kempkes, F., & van Henten, E. J. (2020). GreenLight – An open source model for
        greenhouses with supplemental lighting: Evaluation of heat requirements under LED and HPS lamps.
        Biosystems Engineering, 194, 61–81. https://doi.org/10.1016/j.biosystemseng.2020.03.010
    Katzin, D. (2021). Energy Saving by LED Lighting in Greenhouses : A Process-Based Modelling Approach.
        PhD thesis, Wageningen University. https://doi.org/10.18174/544434
"""

import _katzin_2020_analysis_functions as af
import pandas as pd
from pandas import DataFrame


def generate_table_3(
    greenhouse_data_hps: pd.DataFrame,
    greenhouse_data_led: pd.DataFrame,
    climate_sim_hps: pd.DataFrame,
    climate_sim_led: pd.DataFrame,
    energy_sim_hps: pd.DataFrame,
    energy_sim_led: pd.DataFrame,
) -> tuple[DataFrame, DataFrame, DataFrame]:
    """
    Generate Table 3 from Katzin 2020 - Root mean squared error (RMSE), relative root mean squared error (RRMSE)
    and mean error (ME) between measured and simulated TAir, RHAir, and CO2ppmAir, and measured and simulated heating
    inputs in the HPS and LED compartments.
    See katzin_2020_generate_output.py for usage example.

    The function also adds columns to the DataFrames greenhouse_data_hps, greenhouse_data_led:
            vaporDens       vapor density of the greenhouse air
            vpAir           partial vapor pressure of the greenhouse air
            rhIn            relative humidity of the greenhouse air
            hBoilPipe       calculated energy used for heating (pipe rail system), based on recorded data
            hBoilGroPipe    calculated energy used for heating (grow pipe system), based on recorded data


    :param greenhouse_data_hps: pandas DataFrame created using pd.read_csv with the "dataHPS.csv" file from the original
                                dataset (https://data.4tu.nl/datasets/78968e1b-eaea-4f37-89f9-2b98ba3ed865)
    :param greenhouse_data_led: pandas DataFrame created using pd.read_csv with the "dataLED.csv" file from the original
                                dataset
    :param climate_sim_hps: pandas DataFrame created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_hps.csv" generated by katzin_2020_run_sims.py
    :param climate_sim_led: pandas DataFrame created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_led.csv" generated by katzin_2020_run_sims.py
    :param energy_sim_hps: pandas DataFrame created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_energy_hps.csv" generated by katzin_2020_run_sims.py
    :param energy_sim_led: pandas DataFrame created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_energy_led.csv" generated by katzin_2020_run_sims.py
    :return: tuple containing the following pd.DataFrames:
        table_3                     Data as in Table 3 in Katzin 2020
        greenhouse_data_hps         The input df greenhouse_data_hps, with new columns as above
        greenhouse_data_led        The input df greenhouse_data_led, with new columns as above
    """

    """Calculate partial vapor pressure in data"""
    # The method below is quite convoluted, but this is what was done in the Katzin (2020) publication.
    # See https://github.com/davkat1/GreenLight/blob/4ec6018e0aad2775ad11085d34f3886a7b7dd052/Code/serviceFunctions/vaporDens2pres.m
    # Under "Simulation data/Source code"

    # Convert temperature and vapor density deficit to vapor density
    # See file "Simulation data\Source code\BramVanthoorModelVer2\Code\inputs\loadGreenhouseData.m", line 217
    greenhouse_data_hps["vaporDens"] = (
        af.rh_to_vapor_dens(greenhouse_data_hps["tAir"], 100) - 1e-3 * greenhouse_data_hps["vpdAir"]
    )
    greenhouse_data_led["vaporDens"] = (
        af.rh_to_vapor_dens(greenhouse_data_led["tAir"], 100) - 1e-3 * greenhouse_data_led["vpdAir"]
    )

    # Convert vapor density to vapor pressure
    # See files
    #   "Simulation data\Source code\BramVanthoorModelVer2\Code\runScenarios\climateModelEval_hps_local.m"
    #   "Simulation data\Source code\BramVanthoorModelVer2\Code\runScenarios\climateModelEval_led_local.m"
    # line 23
    greenhouse_data_hps["vpAir"] = af.vapor_dens_to_pressure(
        greenhouse_data_hps["tAir"], greenhouse_data_hps["vaporDens"]
    )
    greenhouse_data_led["vpAir"] = af.vapor_dens_to_pressure(
        greenhouse_data_led["tAir"], greenhouse_data_led["vaporDens"]
    )

    # Convert vapor pressure to relative humidity
    # See file
    #   "Simulation data\Source code\BramVanthoorModelVer2\Code\\postSimAnalysis\rmseRrmseMe.m", line 12
    greenhouse_data_hps["rhIn"] = (
        100
        * greenhouse_data_hps["vpAir"]
        / af.vapor_dens_to_pressure(greenhouse_data_hps["tAir"], af.rh_to_vapor_dens(greenhouse_data_hps["tAir"], 100))
    )
    greenhouse_data_led["rhIn"] = (
        100
        * greenhouse_data_led["vpAir"]
        / af.vapor_dens_to_pressure(greenhouse_data_led["tAir"], af.rh_to_vapor_dens(greenhouse_data_led["tAir"], 100))
    )

    """Calculate measured energy use"""
    # See
    #   https://github.com/davkat1/GreenLight/blob/4ec6018e0aad2775ad11085d34f3886a7b7dd052/Code/runScenarios/evaluateEnergyUseHps.m
    #   lines 88-95
    # and
    #   https://github.com/davkat1/GreenLight/blob/4ec6018e0aad2775ad11085d34f3886a7b7dd052/Code/runScenarios/evaluateEnergyUseLed.m
    #   lines 92-99
    greenhouse_data_hps["hBoilPipe"] = af.pipe_energy(greenhouse_data_hps["tPipe"] - greenhouse_data_hps["tAir"])
    greenhouse_data_hps["hBoilGroPipe"] = af.grow_pipe_energy(
        greenhouse_data_hps["tGroPipe"] - greenhouse_data_hps["tAir"]
    )
    greenhouse_data_led["hBoilPipe"] = af.pipe_energy(greenhouse_data_led["tPipe"] - greenhouse_data_led["tAir"])
    greenhouse_data_led["hBoilGroPipe"] = af.grow_pipe_energy(
        greenhouse_data_led["tGroPipe"] - greenhouse_data_led["tAir"]
    )

    """Create Table 3 from Katzin (2020)"""
    rows = [
        "RMSE tAir (°C)",
        "RMSE rhAir (%)",
        "RMSE co2Air (ppm)",
        "RRMSE tAir (%)",
        "RRMSE rhAir (%)",
        "RRMSE co2Air (%)",
        "ME tAir (°C)",
        "ME rhAir (%)",
        "ME co2Air (ppm)",
        "Measured heating (MJ m**-2)",
        "Simulated heating (MJ m**-2)",
        "RE heating (%)",
    ]
    cols = ["HPS", "LED"]
    table_3 = pd.DataFrame(index=rows, columns=cols)

    # RMSE
    table_3.loc["RMSE tAir (°C)", "HPS"] = ((climate_sim_hps["tAir"] - greenhouse_data_hps["tAir"]) ** 2).mean() ** 0.5
    table_3.loc["RMSE tAir (°C)", "LED"] = ((climate_sim_led["tAir"] - greenhouse_data_led["tAir"]) ** 2).mean() ** 0.5
    table_3.loc["RMSE rhAir (%)", "HPS"] = ((climate_sim_hps["rhIn"] - greenhouse_data_hps["rhIn"]) ** 2).mean() ** 0.5
    table_3.loc["RMSE rhAir (%)", "LED"] = ((climate_sim_led["rhIn"] - greenhouse_data_led["rhIn"]) ** 2).mean() ** 0.5
    table_3.loc["RMSE co2Air (ppm)", "HPS"] = (
        (climate_sim_hps["co2InPpm"] - greenhouse_data_hps["co2InPpm"]) ** 2
    ).mean() ** 0.5
    table_3.loc["RMSE co2Air (ppm)", "LED"] = (
        (climate_sim_led["co2InPpm"] - greenhouse_data_led["co2InPpm"]) ** 2
    ).mean() ** 0.5

    # RRMSE
    table_3.loc["RRMSE tAir (%)", "HPS"] = (
        100
        * (((climate_sim_hps["tAir"] - greenhouse_data_hps["tAir"]) ** 2).mean() ** 0.5)
        / greenhouse_data_hps["tAir"].mean()
    )
    table_3.loc["RRMSE tAir (%)", "LED"] = (
        100
        * (((climate_sim_led["tAir"] - greenhouse_data_led["tAir"]) ** 2).mean() ** 0.5)
        / greenhouse_data_led["tAir"].mean()
    )
    table_3.loc["RRMSE rhAir (%)", "HPS"] = (
        100
        * (((climate_sim_hps["rhIn"] - greenhouse_data_hps["rhIn"]) ** 2).mean() ** 0.5)
        / greenhouse_data_hps["rhIn"].mean()
    )
    table_3.loc["RRMSE rhAir (%)", "LED"] = (
        100
        * (((climate_sim_led["rhIn"] - greenhouse_data_led["rhIn"]) ** 2).mean() ** 0.5)
        / greenhouse_data_led["rhIn"].mean()
    )
    table_3.loc["RRMSE co2Air (%)", "HPS"] = (
        100
        * (((climate_sim_hps["co2InPpm"] - greenhouse_data_hps["co2InPpm"]) ** 2).mean() ** 0.5)
        / greenhouse_data_hps["co2InPpm"].mean()
    )
    table_3.loc["RRMSE co2Air (%)", "LED"] = (
        100
        * (((climate_sim_led["co2InPpm"] - greenhouse_data_led["co2InPpm"]) ** 2).mean() ** 0.5)
        / greenhouse_data_led["co2InPpm"].mean()
    )

    # ME
    table_3.loc["ME tAir (°C)", "HPS"] = (climate_sim_hps["tAir"] - greenhouse_data_hps["tAir"]).mean()
    table_3.loc["ME tAir (°C)", "LED"] = (climate_sim_led["tAir"] - greenhouse_data_led["tAir"]).mean()
    table_3.loc["ME rhAir (%)", "HPS"] = (climate_sim_hps["rhIn"] - greenhouse_data_hps["rhIn"]).mean()
    table_3.loc["ME rhAir (%)", "LED"] = (climate_sim_led["rhIn"] - greenhouse_data_led["rhIn"]).mean()
    table_3.loc["ME co2Air (ppm)", "HPS"] = (climate_sim_hps["co2InPpm"] - greenhouse_data_hps["co2InPpm"]).mean()
    table_3.loc["ME co2Air (ppm)", "LED"] = (climate_sim_led["co2InPpm"] - greenhouse_data_led["co2InPpm"]).mean()

    # Heating
    timestep = 300  # Time steps in data and simulation - 5 minutes = 300 seconds
    table_3.loc["Measured heating (MJ m**-2)", "HPS"] = (
        timestep * 1e-6 * sum(greenhouse_data_hps["hBoilPipe"] + greenhouse_data_hps["hBoilGroPipe"])
    )
    table_3.loc["Simulated heating (MJ m**-2)", "HPS"] = (
        timestep * 1e-6 * sum(energy_sim_hps["hBoilPipe"] + energy_sim_hps["hBoilGroPipe"])
    )
    table_3.loc["RE heating (%)", "HPS"] = (
        100
        * (table_3.loc["Simulated heating (MJ m**-2)", "HPS"] - table_3.loc["Measured heating (MJ m**-2)", "HPS"])
        / table_3.loc["Measured heating (MJ m**-2)", "HPS"]
    )

    table_3.loc["Measured heating (MJ m**-2)", "LED"] = (
        timestep * 1e-6 * sum(greenhouse_data_led["hBoilPipe"] + greenhouse_data_led["hBoilGroPipe"])
    )
    table_3.loc["Simulated heating (MJ m**-2)", "LED"] = (
        timestep * 1e-6 * sum(energy_sim_led["hBoilPipe"] + energy_sim_led["hBoilGroPipe"])
    )
    table_3.loc["RE heating (%)", "LED"] = (
        100
        * (table_3.loc["Simulated heating (MJ m**-2)", "LED"] - table_3.loc["Measured heating (MJ m**-2)", "LED"])
        / table_3.loc["Measured heating (MJ m**-2)", "LED"]
    )

    return table_3, greenhouse_data_hps, greenhouse_data_led


def generate_table_4(climate_sim_hps: pd.DataFrame, climate_sim_led: pd.DataFrame) -> pd.DataFrame:
    """
    Generate Table 4 from Katzin 2020 - Separation of the energy output of each lamp in the simulations performed.
    See katzin_2020_generate_output.py for usage example.

    :param climate_sim_hps: pandas DataFrama created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_hps.csv" generated by katzin_2020_run_sims.py
    :param climate_sim_led: pandas DataFrama created using scripts.analyze_output.make_output_df with the
                            "katzin_2020_climate_led.csv" generated by katzin_2020_run_sims.py
    :return: pandas DataFrame containing aata as in Table 4 in Katzin 2020
    """

    """Create Table 4 from Katzin (2020)"""
    rows = [
        "Total lamp input (MJ m**-2)",
        "PAR output (%)",
        "NIR output (%)",
        "FIR output (%)",
        "Convective output (%)",
        "Cooling (%)",
    ]
    cols = ["HPS", "LED"]
    table_4 = pd.DataFrame(index=rows, columns=cols)

    for lamp in ["HPS", "LED"]:
        if lamp == "HPS":
            sim = climate_sim_hps
        else:
            sim = climate_sim_led

        # See
        # https://github.com/davkat1/GreenLight/blob/4ec6018e0aad2775ad11085d34f3886a7b7dd052/Code/postSimAnalysis/lampOutput.m
        # In Katzin 2020, PAR output and NIR output were expressed simply based on the lamp parameters
        # However, the PAR can be calculated from model outputs, and the NIR can be calculated by taking into account
        # emitted shortwave radiation and subtracting the PAT
        table_4.loc["Total lamp input (MJ m**-2)", lamp] = 300e-6 * sum(sim["qLampIn"])
        table_4.loc["PAR output (%)", lamp] = 100 * sum(sim["rParGhLamp"]) / sum(sim["qLampIn"])
        table_4.loc["NIR output (%)", lamp] = (
            100
            * sum(
                sim["rNirLampCan"]  # NIR from the lamps absorbed by the canopy
                + sim["rNirLampFlr"]  # NIR from the lamps absorbed by the floor
                + sim["rParLampCan"]  # PAR from the lamps absorbed by the canopy
                + sim["rParLampFlr"]  # PAR from the lamps absorbed by the floor
                + sim["rLampAir"]  # PAR and NIR from the lamps not absorbed by the canopy or floor
                - sim["rParGhLamp"]  # Up to here we had NIR and PAR emitted by the lamps. Now subtract by PAR emitted
            )
            / sum(sim["qLampIn"])
        )
        table_4.loc["FIR output (%)", lamp] = (
            100
            * sum(
                sim["rLampSky"]
                + sim["rLampCovIn"]
                + sim["rLampThScr"]
                + sim["rLampPipe"]
                + sim["rFirLampFlr"]
                + sim["rLampBlScr"]
                + sim["rFirLampCan"]
            )
            / sum(sim["qLampIn"])
        )
        table_4.loc["Convective output (%)", lamp] = 100 * sum(sim["hLampAir"]) / sum(sim["qLampIn"])
        table_4.loc["Cooling (%)", lamp] = 100 * sum(sim["hLampCool"]) / sum(sim["qLampIn"])

    return table_4
